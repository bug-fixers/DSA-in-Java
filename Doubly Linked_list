package doubly_Linked_List;
import java.util.Scanner;
class Node 
{
	Scanner Sc=new Scanner(System.in);
	int data;
	Node Prev;
	Node Next;
	Node Head;
	Node()
	{
		data=0;
		Prev=null;
		Next=null;
	}
	void addFirst(int num)
	{
		Node n=new Node();
		if (Head==null)
		{
			n.data=num;
			Head=n;
		}
		else
		{
			n.data=num;
			n.Next=Head;
			Head=n;
		}
		System.out.println("Number "+num+" Added At Position 1");
	}
	void display()
	{
		if (Head!=null)
		{
			System.out.println("Linked List Is Empty");
		}
		else
		{
			Node trav=new Node();
			trav=Head;
			while(trav!=null)
			{
				System.out.println(trav.data);
				trav=trav.Next;	
			}
		}
	}
	void addLast(int num)
	{
		if (Head==null)
		{
		addFirst(num);	
		System.out.println("As Linked List is Empty "+num+" Added At First Position");
		}
		else
		{
			Node n=new Node();
			n.data=num;
			int count=1;
			Node trav=new Node();
			trav=Head;
			while (trav.Next!=null)
			{
				trav=trav.Next;
				count++;
			}
			n.Prev=trav;
			trav.Next=n;
			System.out.println("Number "+num+" Added At Position "+(count+1)+"(Last)");

		}
	
	}
	void addAtPosition()
	{
		if(Head==null)
		{
			System.out.println("Linked List Is Empty");
		}
		else
		{
			System.out.println("Enter The Number");
			int num=Sc.nextInt();
			System.out.println("Enter Position");
			int pos=Sc.nextInt();
			int count=1;
			Node temp=new Node();
			temp=Head;
			while(temp.Next!=null)
			{
				temp=temp.Next;
				count++;
			}
			if(pos==1)
			{
				addFirst(num);
			}
			else if (pos<=count && pos>0)
			{

				Node trav=new Node();
				trav=Head;
				for(int i=1;i<pos-1;i++)
				{
					trav=trav.Next;
				}
				Node n=new Node();
				n.data=num;
				n.Next=trav.Next;
				n.Prev=trav;
				trav.Next=n;
				System.out.println("Number "+num+" Added At Position "+pos);
			}
			else if(pos==(count+1))
			{
				addLast(num);
			}
			
			else
			{
				System.out.println("Index Is Out Of Range");
			}
		}
		
}
	void deleteFirst()
	{
		if (Head==null)
		{
			System.out.println("Linked List Is Empty");
		}
		else
		{
			System.out.println(Head.data+"  Deleted");
			if(Head.Next!=null)
			{
				Head=Head.Next;
				Head.Prev=null;
			}
			else
			{
				Head=null;
			}
		}
	}
	void deleteLast()
	{
		if (Head==null)
		{
			System.out.println("Linked List Is Empty");
		}
		else
		{
			Node trav=new Node();
			int count=1;
			trav=Head;
			while(trav.Next!=null)
			{
				trav=trav.Next;
				count++;
			}
			trav=Head;
			for(int i=1;i<count-1;i++)
			{
				trav=trav.Next;
			}
			System.out.println(trav.Next.data+"  Deleted");
			trav.Next=null;
		
		}
	}
	void deleteAtPosition(int pos)
	{
		if (Head==null)
		{
			System.out.println("Linked List Is Empty");
		}
		else
		{
			int count=1;
			Node temp=new Node();
			temp=Head;
			while(temp.Next!=null)
			{
				count++;
				temp=temp.Next;
			}
			System.out.println(count);
			if (pos==1)
			{
				deleteFirst();
			}
			else if(pos==count && pos>0)
			{
				deleteLast();
			}
			else if (pos<count && pos>0)
			{
				Node trav=new Node();
				trav=Head;
				for(int i=1;i<pos-1;i++)
				{
					trav=trav.Next;
				}
				System.out.println(trav.Next.data+"  Deleted");
					trav.Next=trav.Next.Next;
					Node temp1=new Node();
					temp1=trav;
					trav=trav.Next;
					trav.Prev=temp1;

			}
			else
			{
				System.out.println("Index Is Out Of Range");
			}
		}
	}
	void searchndDelete()
	{
		System.out.println("Enter The Number For Searching & Deleting");
		int num=Sc.nextInt();
		if (Head==null)
		{
			System.out.println("Linked List Is Empty");
		}
		else
		{
			int count=1,flag=0;
			Node trav=new Node();
			trav=Head;
			while(trav.Next!=null)
			{
				if(trav.data==num)
				{
					deleteAtPosition(count);	
					flag=1;
					break;
				}
				trav=trav.Next;
				count++;
			}
			if(trav.data==num && flag==0)
			{
				deleteAtPosition(count);
				flag=1;
			}
			else if(flag==0)
			{
				System.out.println("Number Not Found In Linked List");
			}
			
		}
	}
}
public class Linked_list 
{
public static void main(String[] args) 
{

	Scanner Sc=new Scanner(System.in);
	Node n=new Node();
	int ch=0,num;
	do
	{
		System.out.println("Enter Choice");
		System.out.println("1) For Add Element At First Position");
		System.out.println("2) For Add Element At Last Position");
		System.out.println("3) For Add Element At Perticular Position");
		System.out.println("4) For Delete Element From First Position");
		System.out.println("5) For Delete Element From Last Position");
		System.out.println("6) For Delete Element From Perticular Position");
		System.out.println("7) For Deleting Element After Searching From Linked List ");
		System.out.println("8) Display Linked List");
		System.out.println("9) To Exit");
		ch=Sc.nextInt();
		switch(ch)
		{
		case 1:
			System.out.println("Enter The Number ");
			 num=Sc.nextInt();
			n.addFirst(num);
			break;
		case 2:
			System.out.println("Enter The Number ");
			num=Sc.nextInt();
			n.addLast(num);
			break;
		case 3:
			n.addAtPosition();
			break;
		case 4:
			n.deleteFirst();
			break;
		case 5:
			n.deleteLast();
			break;
		case 6:
			System.out.println("Enter Position");
			int pos=Sc.nextInt();
			n.deleteAtPosition(pos);
			break;
		case 7:
			n.searchndDelete();
			break;
		case 8:
			n.display();
		break;
		case 9:
			System.out.println("Exited");
			break;
		default :
			System.out.println("Enter Valid Choice");
			break;
		}
		
	}while(ch!=9);
	Sc.close();

}
}

